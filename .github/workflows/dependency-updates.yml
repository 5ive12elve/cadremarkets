name: Dependency Updates

on:
  schedule:
    # Run every Monday at 9 AM UTC
    - cron: '0 9 * * 1'
  workflow_dispatch: # Allow manual triggering

jobs:
  dependency-updates:
    name: Check for Dependency Updates
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'

      - name: Install dependencies
        run: |
          npm ci
          cd api && npm ci
          cd ../client && npm ci

      - name: Check for outdated packages
        id: outdated
        run: |
          echo "Checking for outdated packages..."
          
          # Root packages
          npm outdated --json > outdated-root.json || true
          
          # API packages
          cd api
          npm outdated --json > ../outdated-api.json || true
          cd ..
          
          # Client packages
          cd client
          npm outdated --json > ../outdated-client.json || true
          cd ..
          
          # Check if any packages are outdated
          if [ -s outdated-root.json ] || [ -s outdated-api.json ] || [ -s outdated-client.json ]; then
            echo "outdated=true" >> $GITHUB_OUTPUT
          else
            echo "outdated=false" >> $GITHUB_OUTPUT
          fi

      - name: Create or update issue
        if: steps.outdated.outputs.outdated == 'true'
        uses: actions/github-script@v7
        with:
          script: |
            const fs = require('fs');
            
            // Read outdated packages
            const readOutdated = (file) => {
              try {
                const content = fs.readFileSync(file, 'utf8');
                return content.trim() ? JSON.parse(content) : {};
              } catch (e) {
                return {};
              }
            };
            
            const rootOutdated = readOutdated('outdated-root.json');
            const apiOutdated = readOutdated('outdated-api.json');
            const clientOutdated = readOutdated('outdated-client.json');
            
            // Format outdated packages
            const formatOutdated = (packages, title) => {
              const entries = Object.entries(packages);
              if (entries.length === 0) return '';
              
              let output = `## ${title}\n\n`;
              output += '| Package | Current | Wanted | Latest |\n';
              output += '|---------|---------|--------|---------|\n';
              
              entries.forEach(([pkg, info]) => {
                output += `| ${pkg} | ${info.current} | ${info.wanted} | ${info.latest} |\n`;
              });
              
              return output + '\n';
            };
            
            let body = '# ðŸ“¦ Dependency Updates Available\n\n';
            body += 'The following packages have updates available:\n\n';
            
            body += formatOutdated(rootOutdated, 'Root Dependencies');
            body += formatOutdated(apiOutdated, 'API Dependencies');
            body += formatOutdated(clientOutdated, 'Client Dependencies');
            
            body += '\n## ðŸ”§ How to Update\n\n';
            body += '1. Review the changes above\n';
            body += '2. Test the updates in a development environment\n';
            body += '3. Update packages using `npm update` or `npm install package@latest`\n';
            body += '4. Run tests to ensure compatibility\n';
            body += '5. Create a pull request with the changes\n\n';
            body += '---\n';
            body += '*This issue was automatically created by the dependency update workflow.*';
            
            // Check if an issue already exists
            const existingIssues = await github.rest.issues.listForRepo({
              owner: context.repo.owner,
              repo: context.repo.repo,
              labels: ['dependencies', 'maintenance'],
              state: 'open'
            });
            
            const existingIssue = existingIssues.data.find(issue => 
              issue.title.includes('Dependencies need updating')
            );
            
            if (existingIssue) {
              // Update existing issue
              await github.rest.issues.update({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: existingIssue.number,
                body: body
              });
              
              console.log(`Updated existing issue #${existingIssue.number}`);
            } else {
              // Create new issue
              const newIssue = await github.rest.issues.create({
                owner: context.repo.owner,
                repo: context.repo.repo,
                title: 'Dependencies need updating',
                body: body,
                labels: ['dependencies', 'maintenance']
              });
              
              console.log(`Created new issue #${newIssue.data.number}`);
            }

      - name: No updates needed
        if: steps.outdated.outputs.outdated == 'false'
        run: echo "âœ… All dependencies are up to date!" 