import nodemailer from 'nodemailer';

// Create a transporter using Gmail SMTP
// Note: In production, you should use environment variables for email credentials
const createTransporter = () => {
  return nodemailer.createTransport({
    service: 'gmail',
    auth: {
      user: process.env.EMAIL_USER || 'your-email@gmail.com',
      pass: process.env.EMAIL_PASS || 'your-app-password'
    }
  });
};

// Format order items for email
const formatOrderItems = (orderItems) => {
  return orderItems.map((item, index) => {
    let itemDetails = `
      ${index + 1}. ${item.name}
         Price: ${item.price} EGP
         Quantity: ${item.quantity}
         Type: ${item.type}
         Seller: ${item.sellerInfo?.username || 'Unknown'}`;
    
    if (item.selectedSize) {
      itemDetails += `\n         Size: ${item.selectedSize}`;
    }
    
    if (item.dimensions) {
      itemDetails += `\n         Dimensions: ${item.dimensions}`;
    }
    
    if (item.width && item.height) {
      itemDetails += `\n         Width: ${item.width}cm, Height: ${item.height}cm`;
      if (item.depth) {
        itemDetails += `, Depth: ${item.depth}cm`;
      }
    }
    
    return itemDetails;
  }).join('\n\n');
};

// Format customer information for email
const formatCustomerInfo = (customerInfo) => {
  return `
Name: ${customerInfo.name}
Phone: ${customerInfo.phoneNumber}
Email: ${customerInfo.email}
Address: ${customerInfo.address}
City: ${customerInfo.city}
District: ${customerInfo.district}
Payment Method: ${customerInfo.paymentMethod}`;
};

// Send order notification email
export const sendOrderNotificationEmail = async (orderData) => {
  try {
    const transporter = createTransporter();
    
    const {
      _id: orderId,
      orderItems,
      customerInfo,
      shipmentFees,
      totalPrice,
      cadreProfit,
      notes,
      createdAt
    } = orderData;

    const orderDate = new Date(createdAt).toLocaleString('en-US', {
      timeZone: 'Africa/Cairo',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const emailContent = `
New Order Received - ${orderId}

Order Details:
==============

Order ID: ${orderId}
Order Date: ${orderDate}
Status: Placed

Customer Information:
====================
${formatCustomerInfo(customerInfo)}

Order Items:
============
${formatOrderItems(orderItems)}

Order Summary:
==============
Subtotal: ${(totalPrice - shipmentFees).toFixed(2)} EGP
Shipping Fee: ${shipmentFees} EGP
Total: ${totalPrice} EGP
Cadre Profit: ${cadreProfit.toFixed(2)} EGP

${notes ? `Notes: ${notes}` : ''}

---
This email was automatically generated by Cadre Markets.
Order ID: ${orderId}
`;

    const mailOptions = {
      from: process.env.EMAIL_USER || 'your-email@gmail.com',
      to: 'support@cadremarkets.com',
      subject: `New Order: ${orderId}`,
      text: emailContent,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #db2b2e;">New Order Received - ${orderId}</h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Order Details</h3>
            <p><strong>Order ID:</strong> ${orderId}</p>
            <p><strong>Order Date:</strong> ${orderDate}</p>
            <p><strong>Status:</strong> Placed</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Customer Information</h3>
            <p><strong>Name:</strong> ${customerInfo.name}</p>
            <p><strong>Phone:</strong> ${customerInfo.phoneNumber}</p>
            <p><strong>Email:</strong> ${customerInfo.email}</p>
            <p><strong>Address:</strong> ${customerInfo.address}</p>
            <p><strong>City:</strong> ${customerInfo.city}</p>
            <p><strong>District:</strong> ${customerInfo.district}</p>
            <p><strong>Payment Method:</strong> ${customerInfo.paymentMethod}</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Order Items</h3>
            ${orderItems.map((item, index) => `
              <div style="border-bottom: 1px solid #ddd; padding: 10px 0;">
                <h4 style="margin: 0; color: #db2b2e;">${index + 1}. ${item.name}</h4>
                <p style="margin: 5px 0;"><strong>Price:</strong> ${item.price} EGP</p>
                <p style="margin: 5px 0;"><strong>Quantity:</strong> ${item.quantity}</p>
                <p style="margin: 5px 0;"><strong>Type:</strong> ${item.type}</p>
                <p style="margin: 5px 0;"><strong>Seller:</strong> ${item.sellerInfo?.username || 'Unknown'}</p>
                ${item.selectedSize ? `<p style="margin: 5px 0;"><strong>Size:</strong> ${item.selectedSize}</p>` : ''}
                ${item.dimensions ? `<p style="margin: 5px 0;"><strong>Dimensions:</strong> ${item.dimensions}</p>` : ''}
                ${item.width && item.height ? `<p style="margin: 5px 0;"><strong>Dimensions:</strong> ${item.width}cm × ${item.height}cm${item.depth ? ` × ${item.depth}cm` : ''}</p>` : ''}
              </div>
            `).join('')}
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Order Summary</h3>
            <p><strong>Subtotal:</strong> ${(totalPrice - shipmentFees).toFixed(2)} EGP</p>
            <p><strong>Shipping Fee:</strong> ${shipmentFees} EGP</p>
            <p><strong>Total:</strong> ${totalPrice} EGP</p>
            <p><strong>Cadre Profit:</strong> ${cadreProfit.toFixed(2)} EGP</p>
            ${notes ? `<p><strong>Notes:</strong> ${notes}</p>` : ''}
          </div>

          <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #f1f1f1; border-radius: 8px;">
            <p style="margin: 0; color: #666; font-size: 12px;">
              This email was automatically generated by Cadre Markets.<br>
              Order ID: ${orderId}
            </p>
          </div>
        </div>
      `
    };

    const info = await transporter.sendMail(mailOptions);
    console.log('Order notification email sent successfully:', info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Error sending order notification email:', error);
    return { success: false, error: error.message };
  }
};

// Send service request notification email
export const sendServiceRequestEmail = async (serviceData) => {
  try {
    const transporter = createTransporter();
    
    const {
      requestId,
      serviceType,
      requesterName,
      email,
      phoneNumber,
      budget,
      description,
      createdAt
    } = serviceData;

    const serviceDate = new Date(createdAt).toLocaleString('en-US', {
      timeZone: 'Africa/Cairo',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const emailContent = `
New Service Request - ${requestId}

Service Details:
===============

Request ID: ${requestId}
Service Type: ${serviceType}
Request Date: ${serviceDate}
Status: New

Requester Information:
=====================
Name: ${requesterName}
Email: ${email}
Phone: ${phoneNumber}
Budget: ${budget}

Service Description:
===================
${description}

---
This email was automatically generated by Cadre Markets.
Request ID: ${requestId}
`;

    const mailOptions = {
      from: process.env.EMAIL_USER || 'your-email@gmail.com',
      to: 'michaelsamuel@cadremarkets.com',
      subject: `New Service - ${serviceType}`,
      text: emailContent,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #db2b2e;">New Service Request - ${requestId}</h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Service Details</h3>
            <p><strong>Request ID:</strong> ${requestId}</p>
            <p><strong>Service Type:</strong> ${serviceType}</p>
            <p><strong>Request Date:</strong> ${serviceDate}</p>
            <p><strong>Status:</strong> New</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Requester Information</h3>
            <p><strong>Name:</strong> ${requesterName}</p>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Phone:</strong> ${phoneNumber}</p>
            <p><strong>Budget:</strong> ${budget}</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Service Description</h3>
            <p style="white-space: pre-wrap;">${description}</p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #f1f1f1; border-radius: 8px;">
            <p style="margin: 0; color: #666; font-size: 12px;">
              This email was automatically generated by Cadre Markets.<br>
              Request ID: ${requestId}
            </p>
          </div>
        </div>
      `
    };

    const info = await transporter.sendMail(mailOptions);
    console.log('Service request email sent successfully:', info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Error sending service request email:', error);
    return { success: false, error: error.message };
  }
};

// Send contact message notification email
export const sendContactMessageEmail = async (contactData) => {
  try {
    const transporter = createTransporter();
    
    const {
      name,
      email,
      phoneNumber,
      reason,
      message,
      createdAt
    } = contactData;

    const contactDate = new Date(createdAt).toLocaleString('en-US', {
      timeZone: 'Africa/Cairo',
      year: 'numeric',
      month: 'long',
      day: 'numeric',
      hour: '2-digit',
      minute: '2-digit'
    });

    const emailContent = `
New Contact Message - CM-${reason}

Contact Details:
===============

Date: ${contactDate}
Reason: ${reason}

Contact Information:
===================
Name: ${name}
Email: ${email}
Phone: ${phoneNumber}

Message:
========
${message}

---
This email was automatically generated by Cadre Markets.
`;

    const mailOptions = {
      from: process.env.EMAIL_USER || 'your-email@gmail.com',
      to: 'contact@cadremarkets.com',
      subject: `CM-${reason}`,
      text: emailContent,
      html: `
        <div style="font-family: Arial, sans-serif; max-width: 600px; margin: 0 auto;">
          <h2 style="color: #db2b2e;">New Contact Message - CM-${reason}</h2>
          
          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Contact Details</h3>
            <p><strong>Date:</strong> ${contactDate}</p>
            <p><strong>Reason:</strong> ${reason}</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Contact Information</h3>
            <p><strong>Name:</strong> ${name}</p>
            <p><strong>Email:</strong> ${email}</p>
            <p><strong>Phone:</strong> ${phoneNumber}</p>
          </div>

          <div style="background-color: #f8f9fa; padding: 20px; border-radius: 8px; margin: 20px 0;">
            <h3 style="color: #333; margin-top: 0;">Message</h3>
            <p style="white-space: pre-wrap;">${message}</p>
          </div>

          <div style="text-align: center; margin-top: 30px; padding: 20px; background-color: #f1f1f1; border-radius: 8px;">
            <p style="margin: 0; color: #666; font-size: 12px;">
              This email was automatically generated by Cadre Markets.
            </p>
          </div>
        </div>
      `
    };

    const info = await transporter.sendMail(mailOptions);
    console.log('Contact message email sent successfully:', info.messageId);
    return { success: true, messageId: info.messageId };
  } catch (error) {
    console.error('Error sending contact message email:', error);
    return { success: false, error: error.message };
  }
};

// Test email configuration
export const testEmailConfiguration = async () => {
  try {
    const transporter = createTransporter();
    await transporter.verify();
    console.log('Email configuration is valid');
    return true;
  } catch (error) {
    console.error('Email configuration error:', error);
    return false;
  }
}; 